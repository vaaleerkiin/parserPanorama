const express = require("express");
const { chromium } = require("playwright");
const cheerio = require("cheerio");
const cors = require("cors");
const fs = require("fs");
const path = require("path");
const { WebSocketServer } = require("ws");

const app = express();
const PORT = 3000;

app.use(cors());
app.use(express.static("public"));
const logFilePath = path.join(__dirname, "output.md");
fs.writeFileSync(logFilePath, "# –õ–æ–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞\n\n");

const server = app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});

const wss = new WebSocketServer({ server });
let currentSocket = null;

wss.on("connection", (ws) => {
  console.log("üß© WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");
  currentSocket = ws;

  ws.on("close", () => {
    console.log("‚ùå WebSocket –æ—Ç–∫–ª—é—á—ë–Ω");
    currentSocket = null;
  });
});

function sendStatus(message) {
  const timestamp = new Date().toISOString();
  const logLine = `- **[${timestamp}]** ${message}\n`;

  if (currentSocket && currentSocket.readyState === 1) {
    currentSocket.send(JSON.stringify({ type: "status", message }));
  }

  console.log("‚Üí –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç—É:", message);

  fs.appendFile(logFilePath, logLine, (err) => {
    if (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤:", err);
    }
  });
}

app.get("/", (req, res) => {
  console.log("üì• –ó–∞–ø—Ä–æ—Å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ");
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

app.get("/scrape", async (req, res) => {
  const {
    type = "motoryzacja",
    region = "mazowieckie",
    city = "warszawa",
  } = req.query;

  console.log(
    `üì° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: type=${type}, region=${region}, city=${city}`
  );

  const baseUrl = `https://panoramafirm.pl/${type}/${region},,${city}/firmy`;
  console.log("üîó –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL:", baseUrl);

  try {
    console.log("üõ†Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä Chromium...");
    const browser = await chromium.launch({ headless: true });
    console.log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω");

    const pageInstance = await browser.newPage();
    console.log("üåê –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–∞—É–∑–µ—Ä–∞");

    const firstPageUrl = `${baseUrl},1.html`;
    console.log("‚è≥ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:", firstPageUrl);
    await pageInstance.goto(firstPageUrl, { waitUntil: "networkidle" });

    console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
    const firstPageHTML = await pageInstance.content();

    const $ = cheerio.load(firstPageHTML);
    console.log("üßπ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ DOM-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã");

    const pageNumbers = $("ul.pagination li a[data-paginatorpage]")
      .map((_, el) => parseInt($(el).attr("data-paginatorpage"), 10))
      .get()
      .filter((n) => !isNaN(n));
    console.log("üî¢ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:", pageNumbers);

    const maxPage = Math.max(...pageNumbers, 1);
    console.log("üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:", maxPage);
    sendStatus(`üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${maxPage}`);

    const companies = [];
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü...");

    for (let i = 1; i <= maxPage; i++) {
      const url = `${baseUrl},${i}.html`;
      console.log(`‚û°Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${i} –ø–æ URL: ${url}`);
      sendStatus(`‚û°Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${i}: –∑–∞–≥—Ä—É–∂–∞–µ–º ${url}`);

      try {
        await pageInstance.goto(url, { waitUntil: "networkidle" });
        console.log(`üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${i} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);

        const html = await pageInstance.content();
        console.log(
          `üìù –ü–æ–ª—É—á–µ–Ω HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${i}, —Ä–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`
        );

        const match = html.match(/var\s+markers\s*=\s*(\[\{.+?\}\]);/s);
        if (!match) {
          console.warn(`‚ö†Ô∏è markers –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${i}`);
          sendStatus(`‚ö†Ô∏è markers –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${i}`);
          continue;
        }
        console.log(`üîç markers –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${i}`);

        const markers = JSON.parse(match[1]);
        console.log(
          `üì¶ markers —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${markers.length}`
        );

        for (const marker of markers) {
          console.log(
            `üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º marker —Å ${
              marker.companies?.length || 0
            } –∫–æ–º–ø–∞–Ω–∏—è–º–∏`
          );
          for (const company of marker.companies || []) {
            const contact = company.contact || {};
            const slugMatch = company.slug.match(/-([a-z0-9_]+)\.html$/i);
            const slugId = slugMatch ? slugMatch[1] : "";
            const card = $(`li.card.company-item[data-eid="${slugId}"]`);
            const entry = {
              name: company.name,
              address: company.address || "",
              slug: slugId,
              // card: card.length ? card.html() : "",
              stars: card._findBySelector(".rating-average").text()
                ? card._findBySelector(".rating-average").text()
                : 0,
              reviews: (() => {
                const text = card
                  ._findBySelector(".rating-count")
                  .text()
                  .trim();
                const match = text.match(/\((\d+)\s*opini/i);
                return match ? parseInt(match[1], 10) : 0;
              })(),
            };

            if (contact.email) entry.email = contact.email;
            if (contact.phone?.formatted) entry.phone = contact.phone.formatted;
            if (contact.www) entry.www = contact.www;

            companies.push(entry);
            console.log(
              `   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: ${company.name}, slug: ${slugId}`
            );
          }
        }

        sendStatus(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${i}: –≤—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π ‚Äî ${companies.length}`);
        console.log(
          `‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –≤—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π —Å–µ–π—á–∞—Å: ${companies.length}`
        );
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${i}:`, err);
        sendStatus(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${i}: ${err.message}`);
      }

      await new Promise((r) => setTimeout(r, 100));
      console.log(`‚è≤Ô∏è –ü–∞—É–∑–∞ 300 –º—Å –ø–æ—Å–ª–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${i}`);
    }

    await browser.close();
    console.log("üõë –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä");

    sendStatus(`üèÅ –ì–æ—Ç–æ–≤–æ! –í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π: ${companies.length}`);
    console.log("üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π:", companies.length);
    res.json(companies);
  } catch (error) {
    console.error("üö® –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", error);
    sendStatus(`üö® –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ." });
  }
});
